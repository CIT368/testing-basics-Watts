@Test
//unformat method is being tested
/**

    * The unformat method accepts a string containing
    * a telephone number formatted as:
    * (XXX)XXX-XXXX.
    * If the argument is formatted in this way, the
    * method returns an unformatted string where the
    * parentheses and hyphen have been removed. Otherwise,
    * it returns the original argument.
    */
    
   // These constant fields hold the valid lengths of
   // strings that are formatted and unformatted.
   public final static int FORMATTED_LENGTH = 13;
   public final static int UNFORMATTED_LENGTH = 10;


   public static String unformat(String str)
   
   //@Test1: Happy Path test
   //Have input be as described: a 13 character long number string such that
   //str = "(123)123-1234"
   
   {
      // Create a StringBuilder initialized with str.
      StringBuilder strb = new StringBuilder(str);
      
      // If the argument is properly formatted, then
      // unformat it.
      if (isFormatted(str))
      {
         // First, delete the left paren at position 0.
         strb.deleteCharAt(0);
         
         // Next, delete the right paren. Because of the
         // previous deletion it is now located at
         // position 3.
         strb.deleteCharAt(3);
         
         // Next, delete the hyphen. Because of the
         // previous deletions it is now located at
         // position 6.
         strb.deleteCharAt(6);
      }
      
      // Return the unformatted string.
      return strb.toString();
   }
   //Anticipated result is for strb.toString() to equal "1231231234
   
   //@Test 2 Fuzz Test
   //Let str = "arjgn'WE3IT[H  I321h NW"( Literally just rubbed my hand over the keyboard)
   //the code as provided will not produce a phone number as it does not validate the input before attempting to 
   //process it
   //@Test 3 Overload test
   //let str= "123456789101112"
   //Code will not break, but will still not be a valid phone number
